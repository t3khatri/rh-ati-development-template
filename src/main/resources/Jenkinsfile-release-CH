properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT',
            filterLength: 1, 
            filterable: false, 
            name: 'Target', 
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return[\'Could not get target\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return["qa","prod"]'
                ]
            ]
        ], 
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            filterLength: 1, 
            filterable: false, 
            name: 'Environment', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'Target', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return["None"]'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        ''' if(Target.equals("qa")){
                                return["None","atge-services-qa","auc-qa","ross-qa","ccn-qa"]
                            }
                            else if(Target.equals("prod")){
                                return["None","atge-services-prod","auc-prod","ross-prod","ccn-prod"]
                            }
                        '''
                ]
            ]
        ],
         choice(choices: ['4.4.0'], name: 'Runtime Version'),
         choice(choices: ['None','1','2','3','4','5','6','7','8'], name: 'Workers'),
         choice(choices: ['None','MICRO(0.1 vCores)','SMALL(0.2 vCores)','MEDIUM(1 vCore )','LARGE(2 vCores)','XLARGE(4 vCores)','XXLARGE(8 vCores)','4XLARGE(16 vCores)'], name: 'Worker Size'),
         choice(choices: ['false', 'true'], name: 'Persistent Queues'),
         choice(choices: ['N', 'Y'], name: 'isRelease'),
         string(defaultValue: '',name: 'versionNumber', trim: true)
    ])
])
if ("${currentBuild.number}" == '1')
{
	currentBuild.result = 'ABORTED'
	error('Build aborted as this is the first build')
}
else if ("${params.'Environment'}" == 'None')
{
	currentBuild.result = 'ABORTED'
	error('Build aborted as Environment is not selected')
}
else if ("${params.Workers}" == 'None')
{
	currentBuild.result = 'ABORTED'
	error('Build aborted as workers is not selected')
}
else if ("${params.'Worker Size'}" == 'None')
{
	currentBuild.result = 'ABORTED'
	error('Build aborted as worker size is not selected')
}
else if ("$BRANCH_NAME" == 'master' && "${params.Target}" == 'qa' && "${params.isRelease}" == 'N')
{
	currentBuild.result = 'ABORTED'
	error('Build aborted as wrong value for isRelease selected')
}
else if ("$BRANCH_NAME" == 'master' && "${params.Target}" == 'prod' && "${params.isRelease}" == 'N')
{
	currentBuild.result = 'ABORTED'
	error('Build aborted as wrong value for isRelease selected')
}
else if ("$BRANCH_NAME" == 'master' && "${params.Target}" == 'qa' && "${params.isRelease}" == 'Y' && "${params.versionNumber}" == "")
{
	currentBuild.result = 'ABORTED'
	error('Build aborted as version number is not provided')
}
else if ("$BRANCH_NAME" == 'master' && "${params.Target}" == 'prod' && "${params.isRelease}" == 'Y' && "${params.versionNumber}" == "")
{
	currentBuild.result = 'ABORTED'
	error('Build aborted as version number is not provided')
}
else
{
node('DoesAnything')
{
	properties([
	    parameters([
	        [$class: 'ChoiceParameter', 
	            choiceType: 'PT_SINGLE_SELECT',
	            filterLength: 1, 
	            filterable: false, 
	            name: 'Target', 
	            randomName: 'choice-parameter-5631314439613978', 
	            script: [
	                $class: 'GroovyScript', 
	                fallbackScript: [
	                    classpath: [], 
	                    sandbox: true, 
	                    script: 
	                        'return[\'Could not get target\']'
	                ], 
	                script: [
	                    classpath: [], 
	                    sandbox: true, 
	                    script: 
	                        'return["qa","prod"]'
	                ]
	            ]
	        ], 
	        [$class: 'CascadeChoiceParameter', 
	            choiceType: 'PT_SINGLE_SELECT', 
	            filterLength: 1, 
	            filterable: false, 
	            name: 'Environment', 
	            randomName: 'choice-parameter-5631314456178619', 
	            referencedParameters: 'Target', 
	            script: [
	                $class: 'GroovyScript', 
	                fallbackScript: [
	                    classpath: [], 
	                    sandbox: true, 
	                    script: 
	                        'return["None"]'
	                ], 
	                script: [
	                    classpath: [], 
	                    sandbox: true, 
	                    script: 
	                        ''' if(Target.equals("qa")){
	                                return["None","atge-services-qa","auc-qa","ross-qa","ccn-qa"]
	                            }
	                            else if(Target.equals("prod")){
	                                return["None","atge-services-prod","auc-prod","ross-prod","ccn-prod"]
	                            }
	                        '''
	                ]
	            ]
	        ],
	         choice(choices: ['4.4.0'], name: 'Runtime Version'),
	         choice(choices: ['None','1','2','3','4','5','6','7','8'], name: 'Workers'),
	         choice(choices: ['None','MICRO(0.1 vCores)','SMALL(0.2 vCores)','MEDIUM(1 vCore )','LARGE(2 vCores)','XLARGE(4 vCores)','XXLARGE(8 vCores)','4XLARGE(16 vCores)'], name: 'Worker Size'),
	         choice(choices: ['false', 'true'], name: 'Persistent Queues'),
	         choice(choices: ['N', 'Y'], name: 'isRelease'),
	         string(defaultValue: '',name: 'versionNumber', trim: true)
	    ])
])

	echo "current build number: ${currentBuild.number}"
     	echo "Target= '${params.Target}', isRelease= '${params.isRelease}', versionNumber= '${params.versionNumber}'"
     	
     	stage('Preparation')
     	{
     		cleanWs()
     		sh 'sudo yum install -y jq'
      		checkout scm
      		def url = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
     	}

     	stage('Build and Deploy')
     	{ 
     		def groupId = readMavenPom().getGroupId()
     		def artifactId = readMavenPom().getArtifactId()
		
		env.target = "${params.'Target'}"
		env.runtimeVersion = "${params.'Runtime Version'}"
		env.targetEnvironment = "${params.'Environment'}"
		env.muleWorkers = "${params.'Workers'}"
		env.persistentQueues = "${params.'Persistent Queues'}"
		env.targetEnv =target
		
		if ("${params.Target}" == 'qa')
		{
			env.applicationName = artifactId+'-'+target
		}
		else if ("${params.Target}" == 'prod')
		{
			env.applicationName = artifactId
		}
		env.grantType = 'client_credentials'
		env.paramworkerType = "${params.'Worker Size'}"
		env.workerType =paramworkerType.split("\\(")[0]
		
		      //Derive BusinessGroupid
		      echo "Runtime Version = '${runtimeVersion}' , Workers = '${workers}', workerSize = '${workerType}'"
		      if ("${params.Environment}" == 'atge-services-qa' || "${params.Environment}" == 'atge-services-prod')
		      {
		      	withCredentials([
			          string(credentialsId: 'mule_atge_services_bg', variable: 'atgeservicesBG')]) 
		        {
		        	env.businessgroupID = atgeservicesBG
		        }
		       }
		       else if ("${params.Environment}" == 'auc-qa' || "${params.Environment}" == 'auc-prod')
		       {
		       	withCredentials([
		       		string(credentialsId: 'mule_auc_bg', variable: 'aucBG')]) 
		        	{
		               		env.businessgroupID = aucBG
		       	 	}
		       }
		       else if ("${params.Environment}" == 'ross-qa' || "${params.Environment}" == 'ross-prod')
		       {
		       	withCredentials([
		              	 string(credentialsId: 'mule_ross_bg', variable: 'rossBG')]) 
		                 {
		                 	env.businessgroupID = rossBG
		               	 }
		       }
		       else if ("${params.Environment}" == 'ccn-qa' || "${params.Environment}" == 'ccn-prod')
		       {
		       	withCredentials([
		        	string(credentialsId: 'mule_ccn_bg', variable: 'ccnBG')]) 
		                 {
		                	env.businessgroupID = ccnBG
		                 }
		       }
		       else if ("${params.Environment}" == 'becker-qa' || "${params.Environment}" == 'becker-prod')
		       {
		       	withCredentials([
		                string(credentialsId: 'mule_ccn_bg', variable: 'ccnBG')]) 
		                {
		                	env.businessgroupID = ccnBG
		                }
       		}
    		echo "Target1= '${params.Target}', isRelease1= '${params.isRelease}', versionNumber1= '${params.versionNumber}' Branch1 = '$BRANCH_NAME'"
      		if ("$BRANCH_NAME" != 'master' && "${params.Target}" == 'qa' && "${params.isRelease}" == 'N')
      		{
       			sh 'echo NOT MASTER Target==qa && isRelease==N'
       			withCredentials([
			          string(credentialsId: 'mule_secure_encryptionkey', variable: 'encryptSecureKey')]) 
			        {
			        withCredentials([
				string(credentialsId: 'newrelic.license.key', variable: 'newrelicLicenseKey')]) 
        			{
			        withCredentials([
			          usernamePassword(credentialsId: 'mulesoft_connectedapps', passwordVariable: 'connectedapps_clientsecret', usernameVariable: 'connectedapps_clientid'),
			          usernamePassword(credentialsId: 'anypoint_platform_credentials', usernameVariable: 'anypointplatform_clientid', passwordVariable: 'anypointplatform_clientsecret')		          
			          ])
        			{
        			withMaven(maven: "Maven 3.6.3", mavenSettingsConfig: 'Adtalem_Settings_File_CH',mavenOpts: '-Xmx2048m -Xms512m -XX:PermSize=256m') 
        			{
         				final String response = sh(script: "curl --location --request POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token --header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'client_id=${connectedapps_clientid}' --data-urlencode 'client_secret=${connectedapps_clientsecret}' --data-urlencode 'grant_type=client_credentials' | jq -r .'access_token'", returnStdout: true).trim()
                        env.exchangeToken = response
         				def version = ("${params.versionNumber}" != '') ? "${params.versionNumber}" : readMavenPom().getVersion()
         				println("The version is ${version}")
         				sh 'mvn dependency:copy -Dartifact=' + "${groupId}" + ':' + "${artifactId}" + ':' + "${version}" + ':jar:mule-application -DoutputDirectory=.'
         				sh """
         				mv *.jar "${artifactId}-${version}-mule-application.jar"
         				"""
         				echo "...starting to deploy to mule runtime...."
         				
         			//	sh 'mvn --batch-mode mule:deploy -Dmule.artifact=' + "${artifactId}-${version}-mule-application.jar" + ' -Dmule.runtime.server=MULE-ATGE-QA-CLUSTER -Danypoint.user=${DEV_OPS_USER} -Danypoint.password=${DEV_OPS_PWD} -Dmule.runtime.env=QA -Dmule.runtime.targetType=cluster -DskipMunitTests'
         				sh 'mvn --batch-mode mule:deploy -Dmule.artifact=' + "${artifactId}-${version}-mule-application.jar" + ' -DconnectedApp.clientId=${connectedapps_clientid} -DconnectedApp.clientSecret=${connectedapps_clientsecret} -DconnectedApp.grantType=${grantType} -Dmule.runtime.version=${runtimeVersion} -Dmule.applicationName=${applicationName} -Dmule.runtime.env=${targetEnvironment} -Dmule.runtime.workers=${muleWorkers} -Dmule.runtime.workerType=${workerType} -Dmule.app.persistentQueues=${persistentQueues} -Danypoint.businessGroupId=${businessgroupID} -Dencrypt.secret.key=${encryptSecureKey} -Dnewrelic.license.key=${newrelicLicenseKey} -Dmule.env=${targetEnv} -Danypoint.ch.token=${exchangeToken} -Danypoint.platform.client_id=${anypointplatform_clientid} -Danypoint.platform.client_secret=${anypointplatform_clientsecret} -DskipMunitTests'
        			}//withMaven
        		}//withCredentials EncryptionKey
       			}//withCredentials ClientId Secret
       			}//withCredentials New Relic License Key

      		} //if
      		else if ("$BRANCH_NAME" == 'master' && "${params.Target}" == 'qa' && "${params.isRelease}" == 'Y' && "${params.versionNumber}" != null)
      		{
       			sh 'echo MASTER branch '
       			sh 'echo assumption is release is already in Dev environment and the release version is already in nexus'
       			sh 'echo Download from nexus, and deploy the binary to QA Mule environment. Use the versionNumber if passed.'
       			withCredentials([
					string(credentialsId: 'mule_secure_encryptionkey', variable: 'encryptSecureKey')]) 
					{
					withCredentials([
					string(credentialsId: 'newrelic.license.key', variable: 'newrelicLicenseKey')]) 
        				{
					withCredentials([
						   usernamePassword(credentialsId: 'mulesoft_connectedapps', passwordVariable: 'connectedapps_clientsecret', usernameVariable: 'connectedapps_clientid'),
						   usernamePassword(credentialsId: 'anypoint_platform_credentials', usernameVariable: 'anypointplatform_clientid', passwordVariable: 'anypointplatform_clientsecret')					          
						   ])
        			{
        			withMaven(maven: "Maven 3.6.3", mavenSettingsConfig: 'Adtalem_Settings_File_CH',mavenOpts: '-Xmx2048m -Xms512m -XX:PermSize=256m')
        			{
         				final String response = sh(script: "curl --location --request POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token --header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'client_id=${connectedapps_clientid}' --data-urlencode 'client_secret=${connectedapps_clientsecret}' --data-urlencode 'grant_type=client_credentials' | jq -r .'access_token'", returnStdout: true).trim()
                        env.exchangeToken = response
         				//def version = ("${params.versionNumber}" != '') ? "${params.versionNumber}" : readMavenPom().getVersion().replace("-SNAPSHOT", "")
         				def version = "${params.versionNumber}"
         				println("The version is ${version}")
         				sh 'mvn dependency:copy -Dartifact=' + "${groupId}" + ':' + "${artifactId}" + ':' + "${version}" + ':jar:mule-application -DoutputDirectory=.'
         				//sh """
         				//mv *.jar "${artifactId}-${version}-mule-application.jar"
        			//	"""
         				echo "...starting to deploy to mule runtime...."
         			//	sh 'mvn --batch-mode mule:deploy -Dmule.artifact=' + "${artifactId}-${version}-mule-application.jar" + ' -Dmule.runtime.server=MULE-ATGE-QA-CLUSTER -Danypoint.user=${DEV_OPS_USER} -Danypoint.password=${DEV_OPS_PWD} -Dmule.runtime.env=QA -Dmule.runtime.targetType=cluster -DskipMunitTests'
         				sh 'mvn --batch-mode mule:deploy -Dmule.artifact=' + "${artifactId}-${version}-mule-application.jar" + ' -DconnectedApp.clientId=${connectedapps_clientid} -DconnectedApp.clientSecret=${connectedapps_clientsecret} -DconnectedApp.grantType=${grantType} -Dmule.runtime.version=${runtimeVersion} -Dmule.applicationName=${applicationName} -Dmule.runtime.env=${targetEnvironment} -Dmule.runtime.workers=${muleWorkers} -Dmule.runtime.workerType=${workerType} -Dmule.app.persistentQueues=${persistentQueues} -Danypoint.businessGroupId=${businessgroupID} -Dencrypt.secret.key=${encryptSecureKey} -Dnewrelic.license.key=${newrelicLicenseKey} -Dmule.env=${targetEnv} -Danypoint.ch.token=${exchangeToken} -Danypoint.platform.client_id=${anypointplatform_clientid} -Danypoint.platform.client_secret=${anypointplatform_clientsecret} -DskipMunitTests'
        			} //withMaven
        		} //withCredentials EncryptionKey
       			} //withCredentials ClientId Secret
       			} //withCredentials New Relic License Key
      		} //else if
      		else if ("$BRANCH_NAME" == 'master' && "${params.Target}" == 'prod' && "${params.isRelease}" == 'Y' && "${params.versionNumber}" != "")
      		{
       			println("MASTER branch")
       			println("assumption is release is already in Dev & QA environment and the release version is already in nexus")
       			println("Download from nexus, and deploy the binary to Prod Mule environment. Use the versionNumber if passed")
        		withCredentials([
					string(credentialsId: 'mule_secure_encryptionkey', variable: 'encryptSecureKey')]) 
					{
					withCredentials([
					string(credentialsId: 'newrelic.license.key', variable: 'newrelicLicenseKey')]) 
        				{
					withCredentials([
							usernamePassword(credentialsId: 'mulesoft_connectedapps', passwordVariable: 'connectedapps_clientsecret', usernameVariable: 'connectedapps_clientid'),
						    usernamePassword(credentialsId: 'anypoint_platform_credentials', usernameVariable: 'anypointplatform_clientid', passwordVariable: 'anypointplatform_clientsecret')
							])
        			{
        			withMaven(maven: "Maven 3.6.3", mavenSettingsConfig: 'Adtalem_Settings_File_CH',mavenOpts: '-Xmx2048m -Xms512m -XX:PermSize=256m')
        			{
         				final String response = sh(script: "curl --location --request POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token --header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'client_id=${connectedapps_clientid}' --data-urlencode 'client_secret=${connectedapps_clientsecret}' --data-urlencode 'grant_type=client_credentials' | jq -r .'access_token'", returnStdout: true).trim()
                        env.exchangeToken = response
         				//def version = ("${params.versionNumber}" != '') ? "${params.versionNumber}" : readMavenPom().getVersion().replace("-SNAPSHOT", "")
         				def version = "${params.versionNumber}"
         				println("The version is ${version}")
         				sh 'mvn dependency:copy -Dartifact=' + "${groupId}" + ':' + "${artifactId}" + ':' + "${version}" + ':jar:mule-application -DoutputDirectory=.'
         				//sh """
         				//mv *.jar "${artifactId}-${version}-mule-application.jar"
         				//"""
         				echo "...starting to deploy to mule production...."
         			//	sh 'mvn --batch-mode mule:deploy -Dmule.artifact=' + "${artifactId}-${version}-mule-application.jar" + ' -Dmule.runtime.server=MULE-ATGE-PROD-CLUSTER -Danypoint.user=${DEV_OPS_USER} -Danypoint.password=${DEV_OPS_PWD} -Dmule.runtime.env=Production -Dmule.runtime.targetType=cluster -DskipMunitTests'
         				sh 'mvn --batch-mode mule:deploy -Dmule.artifact=' + "${artifactId}-${version}-mule-application.jar" + ' -DconnectedApp.clientId=${connectedapps_clientid} -DconnectedApp.clientSecret=${connectedapps_clientsecret} -DconnectedApp.grantType=${grantType} -Dmule.runtime.version=${runtimeVersion} -Dmule.applicationName=${applicationName} -Dmule.runtime.env=${targetEnvironment} -Dmule.runtime.workers=${muleWorkers} -Dmule.runtime.workerType=${workerType} -Dmule.app.persistentQueues=${persistentQueues} -Danypoint.businessGroupId=${businessgroupID} -Dencrypt.secret.key=${encryptSecureKey} -Dnewrelic.license.key=${newrelicLicenseKey} -Dmule.env=${targetEnv} -Danypoint.ch.token=${exchangeToken} -Danypoint.platform.client_id=${anypointplatform_clientid} -Danypoint.platform.client_secret=${anypointplatform_clientsecret} -DskipMunitTests'
        			} //withMaven
        		} //withCredentials EncryptionKey
        		} //withCredentials ClientId Secret
       			} //withCredentials
      		} // else if
      		else
      		{
       			currentBuild.result = 'ABORTED'
			error('Wrong input selected.')
      		}
     	} //stage('Build and Deploy')
     	} //else code for build number
} //node('DoesAnything')